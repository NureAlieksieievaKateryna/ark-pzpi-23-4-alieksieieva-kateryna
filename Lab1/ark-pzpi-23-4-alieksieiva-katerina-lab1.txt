МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
 
 
 
 
 
 
ЗВІТ
з дисципліни «Аналіз та рефакторинг коду»
Лабораторна робота №1
РОЗРОБКА ДОКУМЕНТУ VISION & SCOPE
 
 
 
 
Виконала:   	 	 	 	 	                  Перевірил:
ст. гр. ПЗПІ-23-4   	 	 	 	                  старший викладач каф. ПІ
Алєксєєва К.С.   	 	 	 	                  Сокорчук І.П.
 
 
 
 
 
 
 

ХАРКІВ 2025
1.	ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	23.10.2025	0.1	Створено звіт


2. ЗАВДАННЯ
Основна мета роботи – створити фундаментальну документацію (Vision & Scope) для проєкту сервісу підписок. Це включає опис ключових елементів: від проблематики та бізнес-логіки до функціональних компонентів.


3. ОПИС ВИКОНАНОЇ РОБОТИ
Було успішно створено документацію Vision & Scope для сервісу управління підписками, деталізуючи бізнес-бачення, проблематику та ключові функції. Опис проєкту у форматі Vision & Scope наведен у додатку Б.


4. ВИСНОВКИ
Успішно створено концептуальний документ («Subscription Platform»), який чітко визначає бізнес-рамки та технічне бачення проєкту. Набуті навички формування бізнес-вимог та пріоритетів, а також планування, що забезпечує надійну основу для подальшої розробки та досягнення визначених критеріїв успіху.


5. ВИКОРИСТАНІ ДЖЕРЕЛА
1.	ISO/IEC/IEEE 29148:2018. Systems and software engineering — Life cycle processes — Requirements engineering. Geneva, Switzerland: ISO/IEC, 2018.
2.	ДСТУ 8302:2015. Інформація та документація. Бібліографічне посилання. Загальні положення та правила складання. Київ: ДП «УкрНДНЦ», 2015.
3.	Fowler, M. Patterns of Enterprise Application Architecture. Addison-Wesley Professional, 2002.
4.	Офіційна документація фреймворку Spring Boot (версія 3.x). URL: https://spring.io/projects/spring-boot


ДОДАТОК А
Відеозапис
Відеозапис
Відеозапис презентації результатів лабораторної роботи: 
Хронологічний опис відеозапису:
00:00 – Вступ
00:13 – Аналіз проблеми
01:55 – Аналіз аналогів
02:56 – Опис призначення системи
03:44 – Опис бізнес-логіки
05:32 – Опис функціональності серверної частини та IoT-клієнта
07:20 – Опис функціональності веб-клієнта та мобільного клієнта
08:47 – Опис програмних засобів та інструментів

ДОДАТОК Б
КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ (PROJECT VISION AND SCOPE)
1. КОНЦЕПЦІЯ ТА РАМКИ ПРОЄКТУ (CONCEPT AND PROJECT FRAMEWORK)
1.1 Аналіз проблеми, яку вирішує програмна система
Програмна система вирішує подвійну проблему: проблему хаосу витрат клієнта та проблему низької гнучкості бізнес-моделей.
Проблема для Клієнта (Subscription Fatigue): У сучасному світі клієнти мають десятки підписок у різних закладах, що призводить до "втоми від підписок" та "прихованих" витрат. Клієнти не можуть централізовано відстежувати дати списання, порівнювати пропозиції або знати про невикористаний баланс послуг. Це спричиняє фінансовий дискомфорт, несподівані списання коштів і загальне відчуття втрати контролю над власними фінансами.
Проблема для Бізнесу (Rigidity and Data Blindness): Більшість закладів можуть пропонувати лише стандартні, негнучкі пакети (наприклад, "місячний абонемент без обмежень"). Створення кастомних, багатокомпонентних підписок (наприклад, "5 масажів + 3 заняття йогою + 10 кав на виніс") вимагає значних ручних зусиль, складної системи внутрішнього обліку та високих адміністративних витрат. Крім того, заклади не мають доступу до узагальненої ринкової аналітики попиту, що обмежує їхню здатність створювати нові, конкурентні пропозиції. Система надає можливість вирватися з цього обмеження, пропонуючи гнучкий конструктор пропозицій.
1.2 Аналіз ананлогів
На існуючі ринкові аналоги можна класифікувати за їхньою основною функцією, і жоден з них не поєднує всі ключові особливості платформи:
Маркетплейси бронювання (наприклад, Booksy, Treatwell): Вони чудово справляються з одноразовим бронюванням або купівлею одиничних послуг. Їхній функціонал для регулярних, комплексних підписок та управління балансом використань є мінімальним або відсутнім. Вони не створюють єдиний, порівнюваний каталог саме абонементів.
Платіжні шлюзи та процесори (наприклад, LiqPay, Stripe): Ці інструменти забезпечують лише технічну обробку транзакції та регулярні списання коштів. Вони не надають клієнтам інтерфейсу для управління купівлями, не формують каталог пропозицій і не збирають бізнес-аналітику, окрім фінансової.
Внутрішні CRM/ERP системи: Ці системи використовуються закладами для внутрішнього обліку, але вони є ізольованими. Клієнт не може бачити, порівнювати чи керувати в них підписками з інших закладів, а бізнес не отримує порівняльних даних із ринку.
Ключова перевага Subscription Platform: Наш продукт є спеціалізованим маркетплейсом підписок, який не просто обробляє платежі, а надає закладам гнучкий конструктор кастомних пакетів, а клієнтам — єдину точку управління всіма послугами, що робить його унікальним рішенням на ринку послуг.

2. КОНЦЕПЦІЯ РІШЕННЯ (VISION OF SOLUTION)
2.1 Опис призначення системи
Програмна система "Subscription Platform" створюється як централізована екосистема, що радикально спрощує купівлю, управління та надання регулярних послуг. Її призначення полягає у забезпеченні безшовного циклу взаємодії: від створення закладом унікальної, гнучкої пропозиції до її придбання, споживання та автоматичного поновлення клієнтом. Система є не лише точкою продажу, але й потужним аналітичним інструментом, що надає бізнесу дані для оптимізації пропозицій, а клієнтам — прозорість витрат.
2.2 Опис бізнес логіки системи
Бізнес-логіка будується навколо кастомних підписок (Flexible/Custom Subscriptions) та їхнього життєвого циклу.
Конструктор Підписок: Заклад має можливість створити підписку, що складається з кількох елементів:
•	Компоненти послуг: Визначення набору послуг (наприклад, "відвідування тренажерного залу", "стрижка", "кава").
•	Ліміти використання: Встановлення кількості (наприклад, 8 відвідувань, 4 стрижки) або необмежений доступ на період.
•	Часові рамки: Фіксований термін (місяць), абонемент "до використання", або циклічне списання.
•	Правила паузи: Можливість призупинити підписку на певний термін.
•	Ціноутворення: Автоматичний розрахунок вартості пакета на основі включених компонентів.
•	Транзакційний Облік: Логіка забезпечує цілісність фінансових транзакцій: списання коштів, застосування комісії, розрахунок чистого доходу закладу та фіксація даних у зашифрованому вигляді.
•	Аналітична Логіка: Система анонімізовано збирає дані про пошукові запити, перегляди пропозицій та залишені відгуки. На основі цих даних формуються звіти по ринковому попиту для закладів, що є ключовою цінністю преміум-підписки.

3. РАМКИ ТА ОБМЕЖЕННЯ (SCOPE AND LIMITATIONS)
3.1 Опис функціональності серверної частини та ІоТ клієнта
	Сервер є центром обробки бізнес-логіки, який забезпечує надійну взаємодію між користувачами, базою даних, платіжними шлюзами та ІоТ-пристроями. Серверна архітектура будується на модульній основі для забезпечення високої відмовостійкості, що є критичним для транзакційної системи. Вона включає ключові служби, кожна з яких виконує свій набір завдань:
•	Управління користувачами (Identity Service): Реєстрація, авторизація, управління ролями (клієнт, заклад, адміністратор) та правами доступу.
•	Управління підписками (Subscription Core): CRUD-операції для пропозицій, управління життєвим циклом підписок (активація, призупинення, поновлення), облік використаного балансу послуг та лімітів.
•	Обробка платежів (Payment Handler): Ініціалізація та обробка транзакцій, логіка рекурентних списань та управління поверненнями коштів.
•	Аналітичний рушій (Analytics Engine): Збір та обробка анонімізованих даних, формування звітів по ринковому попиту та ефективності пропозицій.
ІоТ-клієнт є критично необхідним для забезпечення цілісності обліку послуг у фізичних закладах, виступаючи проміжною ланкою між системою та точкою споживання. Його завдання:
•	Верифікація клієнта: Сканування цифрового QR/NFC-квитка клієнта на вході або перед наданням послуги.
•	Облік споживання: Миттьове списання одиниці послуги з балансу кастомної підписки через серверне API.
•	Запобігання шахрайству: Перевірка лімітів підписки в режимі реального часу, щоб унеможливити використання вже вичерпаної послуги.
3.2  Опис функціональності веб клієнта та мобільного клієнта
Веб-клієнт є основним багатофункціональним інтерфейсом, орієнтованим на адміністраторів та кінцевих клієнтів, які працюють з робочої станції або ПК.
Для клієнтів: Централізований каталог, розширений пошук підписок, порівняння пропозицій та доступ до захищеного особистого кабінету з історією покупок.
Для закладів (Панель адміністратора): Гнучке управління пропозиціями через конструктор кастомних підписок, моніторинг поточних продажів та доступ до базової аналітики.
Веб-клієнт виконує запити до серверного API, а його інтерфейс повністю адаптований під мобільні пристрої (Responsive Web Design).
Мобільний клієнт на етапі MVP реалізований як адаптивний веб-додаток. У майбутніх релізах він буде нативним додатком (iOS/Android), орієнтованим на швидке споживання послуг.
Ключові функції: Відображення цифрового QR/NFC-квитка для швидкої верифікації через ІоТ-клієнт, отримання Push-сповіщень про дати списання та низький баланс послуг.
Мобільний клієнт отримує та надсилає дані через серверний API для забезпечення актуальності інформації про підписки.
4. БІЗНЕС-КОНТЕКСТ (BUSINESS CONTEXT)
4.3 Опис програмних засобів та програмних інструментів, які будуть використані у проєкті
 Для реалізації високопродуктивної, надійної та масштабованої системи обрано сучасний набір технологій, що відповідає промисловим стандартам для складних транзакційних платформ.
Основною мовою розробки серверної частини є Java, а в якості фреймворку REST API обрано Spring Boot. Цей вибір забезпечує високу продуктивність, модульність архітектури та надійність, що є критично важливим для обробки фінансових транзакцій і підтримки асинхронних операцій. Середовищем розробки буде Intelij Idea.
Для зберігання всіх критичних даних профілів, транзакцій та підписок використовуватиметься PostgreSQL. Це реляційна СУБД, відома своєю надійністю, гарантуванням цілісності даних та потужною підтримкою складних аналітичних запитів.
Для керування версіями та відстеження змін використовуватиметься Git, а репозиторій буде розміщено на GitHub, що дозволяє безпечно зберігати код, вести історію змін і підтримувати командну розробку.
Якість коду та виявлення вразливостей буде контролюватися за допомогою SonarQube, що інтегрується у процес безперервної інтеграції (CI) та забезпечує дотримання високих стандартів безпеки та чистоти коду.
Swagger UI буде використовуватися для автоматичної генерації документації REST API. Це забезпечує зручність інтеграції для фронтенд-розробників та зовнішніх сервісів, які взаємодіють із бекендом.
Інфраструктура проекту буде розміщена на хмарних сервісах, що необхідно для гарантування еластичного масштабування та безперебійної доступності системи у режимі 24/7. Для забезпечення надійного зв'язку між сервером і точками споживання, зокрема ІоТ-модулем, планується використати протокол MQTT або інший легкодоступний протокол публікації та підписки. Критично важливим аспектом є також інтеграція з API провідних платіжних систем, які відповідають міжнародним стандартам безпеки, що забезпечить коректну обробку рекурентних платежів.



