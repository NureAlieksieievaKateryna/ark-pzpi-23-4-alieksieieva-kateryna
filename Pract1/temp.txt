МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ 
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ 
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ 
 
 
 
 
 
 
 
ЗВІТ 
з дисципліни «Аналіз та рефакторинг коду» 
Практична робота №1
 
 
 
 
Виконала:   	 	 	 	 	              Перевірила:  
ст. гр. ПЗПІ-23-4   	 	 	 	              старший викладач каф. ПІ  
Алєксєєва К.С.   	 	 	 	 	   Сокорчук І.П. 
 
 
 
 
 
 
 


	ХАРКІВ 2025 
	ХІД РОБОТИ

1.	  Мета роботи
Основні рекомендації написання коду згідно Code Convention. Використання даних правил з метою покращення читабельності, структурованості та зрозумілості програмного забезпечення.

2.	Опис виконаної роботи
У цій практичній роботі було обрано мову програмування Java. Під час виконання роботи я розглянула основні правила оформлення коду в мові Java відповідно до стандартів Java Code Conventions. Ознайомилася з вимогами до іменування класів, методів, змінних, а також із правилами форматування коду. У ході роботи були наведені приклади правильного та неправильного оформлення коду, що допомогло краще зрозуміти важливість дотримання єдиного стилю програмування для підвищення читабельності та підтримуваності програмного забезпечення. На першому слайді який наведено у додатку Б.1 показано приклади поганого та гарного коду , в якому демонструється правило Використання констант замість «магічних чисел». Рекомендація: Замість чисел або рядків без пояснення використовуйте константи. Це підвищує зрозумілість коду та полегшує зміну значень у майбутньому. 
Гарний приклад. Константа MAX_LOGIN_ATTEMPTS дає зрозуміле ім’я числу 5. Код легко читати та підтримувати: одразу видно, що 5 — це максимальна кількість спроб входу. 
private static final int MAX_LOGIN_ATTEMPTS = 5;

if (attempts > MAX_LOGIN_ATTEMPTS) {
    lockUserAccount();
}





Поганий приклад. Ми маємо логіку, яка блокує обліковий запис користувача після певної кількості невдалих спроб входу. Кількість спроб у коді може змінюватися у майбутньому, тому важливо не вставляти число напряму у порівняння.
if (attempts > 5) {
    lockUserAccount();
}
У висновку можно сказати Завжди використовуйте константи з описовими іменами замість “магічних чисел”. Це підвищує зрозумілість, безпеку і підтримуваність коду.

У додатку Б.2 показано принцип Dry. Принцип DRY (Don’t Repeat Yourself) підвищує підтримуваність коду. Зміни потрібно вносити в одному місці, а не у всіх копіях коду. Наприклад, якщо бізнес-логіка змінюється, достатньо змінити її в одному методі, і всі виклики автоматично будуть оновлені. Він також допомагає зменшити помилки. Дублювання коду підвищує ризик помилок при оновленні, оскільки можна пропустити одну з копій. Принцип DRY покращує читабельність коду. Код стає коротшим і більш структурованим, що полегшує розуміння його логіки. Крім того, DRY сприяє повторному використанню. Винесені методи або класи можна використовувати в інших частинах програми або в майбутніх проєктах.
Поганий приклад
public class Calculator {
    public int sum(int a, int b) {
        return a + b;
    }
    
    public int sumThreeNumbers(int a, int b, int c) {
        return sum(sum(a, b), c); // повторна використання методу sum
    }
}
Гарний приклад
public class Calculator {
    public int sumThreeNumbers(int a, int b, int c) {
        return a + b + c; // логіка суми двох чисел дублюється для трьох чисел
    }
}
У першому прикладі ми використовуємо метод sum повторно, дотримуючись принципу DRY. У другому прикладі кожна операція суми пишеться заново, що призводить до дублювання логіки.
Принцип DRY допомагає писати чистий, зрозумілий і підтримуваний код, зменшує ризик помилок і полегшує майбутні зміни в програмі.
У додатку Б.3 відображено Принцип рефакторингу: Метод «Extract Method». Якщо у вас є великий або складний фрагмент коду, виділіть його в окремий метод з описовою назвою. Це допомагає зробити код більш зрозумілим, структурованим і легким для тестування. Цей принцип потрібен для підвищення читабельності коду, срощує підтримку, зменшує дублювання коду, та полегшує тестування.
Приклад застосування «Extract Method»
public void processOrder(Order order) {
    validateOrder(order);
    calculateTotal(order);
    saveOrder(order);
}

private void validateOrder(Order order) {
    // перевірка даних замовлення
}

private void calculateTotal(Order order) {
    // обчислення загальної суми
}

private void saveOrder(Order order) {
    // збереження замовлення в базу
}
Поганий приклад
public void processOrder(Order order) {
    // перевірка даних замовлення
    if (order.getItems().isEmpty()) {
        throw new IllegalArgumentException("Order is empty");
    }

    // обчислення загальної суми
    double total = 0;
    for (Item item : order.getItems()) {
        total += item.getPrice();
    }

    // збереження замовлення в базу
    database.save(order);
}
У першому прикладі логіка розбита на окремі методи з описовими назвами, що робить код структурованим і легким для читання. У другому прикладі весь код знаходиться в одному методі, що ускладнює його розуміння, тестування та повторне використання. Метод «Extract Method» допомагає зробити код більш чистим, модульним і зручним для підтримки, підвищує його читабельність і повторне використання.

У додатку Б.4 відображено Принцип рефакторингу KISS. Пишіть код максимально простим і зрозумілим. Уникайте надмірної складності, зайвих конструкцій та непотрібних оптимізацій на початковому етапі. Простий код легше читати, тестувати та підтримувати.
Принцип KISS (Keep It Simple, Stupid) покращує читабельність коду. Простий код легше зрозуміти іншому розробнику або собі через кілька місяців. Він також спрощує налагодження та тестування, оскільки чим простіша логіка, тим менше ймовірність помилок, і легше знаходити та виправляти баги. Принцип KISS допомагає зменшити технічний борг. Складні конструкції та надлишковий код створюють труднощі для майбутніх змін і підтримки. Крім того, він сприяє повторному використанню коду. Простий, модульний код легше інтегрувати в інші частини програми або в майбутні проєкти.
Гарний приклад
public int calculateDiscount(int price) {
    if (price > 1000) {
        return price / 10; // 10% знижка
    }
    return 0;
}
Поганий приклад
public int calculateDiscount(int price) {
    int discount = 0;
    if (price > 1000) {
        discount = (int) Math.floor(price * 0.1);
    } else {
        discount = 0;
    }
    return discount;
}
У першому прикладі код простий, зрозумілий і виконує завдання без зайвих дій. У другому прикладі додано непотрібні змінні та обчислення, що ускладнює читання і розуміння логіки. Принцип KISS допомагає писати чистий, зрозумілий та підтримуваний код, знижує ймовірність помилок та полегшує майбутні зміни.
У додатку Б.5 золбражено принцип Не зловживай public. Не робіть поля та методи public без потреби. Використовуйте модифікатори доступу private або protected для приховання реалізації класу. Доступ до даних надавайте через геттери та сеттери. Принцип «Не зловживай public» підвищує безпеку та інкапсуляцію коду. Поля класу, приховані від зовнішнього доступу, не можуть бути змінені випадково з іншого коду. Він також зменшує зв’язність між класами. Зовнішні класи не залежать від внутрішньої структури класу, що полегшує внесення змін та рефакторинг. Крім того, принцип полегшує підтримку коду. Якщо потрібно змінити реалізацію поля чи методу, зовнішній код не буде порушений, оскільки доступ до внутрішніх елементів обмежений.
Гарний приклад 
public class User {
    private String name;  // приховане поле

    public String getName() {  // доступ через метод
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
Поганий приклад
public class User {
    public String name;  // поле доступне і змінюване будь-де
}
У першому прикладі поле name приховане, і доступ до нього відбувається через методи, що дозволяє контролювати значення та робить клас більш безпечним. У другому прикладі поле name доступне з будь-якого місця, що підвищує ризик випадкових змін і ускладнює підтримку коду.
Принцип «Не зловживай public» допомагає підтримувати інкапсуляцію, безпеку і модульність коду, знижує зв’язність між класами та полегшує майбутні зміни.
У додатку Б.6 зображено важливий принцип «Форматуй блоки коду логічно — “повітря” для очей» полягає у використанні порожніх рядків для розділення логічних частин коду. Це підвищує читабельність і дозволяє швидше зрозуміти структуру програми. Правильно відформатований код легше підтримувати, а його логіку сприймати іншим розробникам.

ВИСНОВОК
Принцип логічного форматування коду допомагає зробити програму більш зрозумілою та охайною. Використання порожніх рядків між логічними блоками коду підвищує його читабельність і спрощує сприйняття структури програми. Правильно відформатований код легше підтримувати та змінювати, а також знижує ризик помилок при внесенні змін.
Такий підхід робить код більш “дружнім” для інших розробників, які можуть працювати над проєктом у майбутньому.
 
ДОДАТОК А
Відеозапис
Хронологічний опис відеозапису:
https://youtu.be/4Vp5KlLdufA

0:00 - Початок відео
2:00 - Опис принципів

 	  




ДОДАТОК Б
Графічні метеріали
 
Рисунок Б.1 – Титульний слайд
 
Рисунок Б.2 – Використання констант замість «магічних чисел»
 
Рисунок Б.3 – Опис правила
 
Рисунок Б.4 – Опис правила
 
Рисунок Б.5 – Принцип KISS
 
Рисунок Б.6 – Принцип DRY
 
Рисунок Б.7 – О Принципи рефакторингу: Метод «Extract Method»
 
 Рисунок Б.8 – Опис правила
 
Рисунок Б.9 – Опис правила
 
Рисунок Б.10 – Не зловживай public
 
Рисунок Б.11 – Форматуй блоки коду логічно — “повітря” для очей






